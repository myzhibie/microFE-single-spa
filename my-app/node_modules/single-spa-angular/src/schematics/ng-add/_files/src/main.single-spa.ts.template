<% if (!atLeastAngular8) { %>import 'core-js/es7/reflect';<% } %>
<% if (routing) { %>import { enableProdMode, NgZone } from '@angular/core';<% } %>
<% if (!routing) { %>import { enableProdMode, NgZone } from '@angular/core';<% } %>
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';<% if (routing) { %>
import { Router } from '@angular/router';<% } if (usingBrowserAnimationsModule) { %>
import { ÉµAnimationEngine as AnimationEngine } from '@angular/animations/browser'; <% } %>
import { AppModule } from './app/app.module';
import { environment } from './environments/environment';
import singleSpaAngular from 'single-spa-angular';
import { singleSpaPropsSubject } from './single-spa/single-spa-props';

if (environment.production) {
  enableProdMode();
}

const lifecycles = singleSpaAngular({
  bootstrapFunction: singleSpaProps => {
    singleSpaPropsSubject.next(singleSpaProps);
    return platformBrowserDynamic().bootstrapModule(AppModule);
  },
  template: '<<%= prefix %>-root />',<% if (routing) { %>
  Router,<% } %>
  NgZone: NgZone,<% if (usingBrowserAnimationsModule) { %>
  AnimationEngine: AnimationEngine,<% } %>
});

export const bootstrap = lifecycles.bootstrap;
export const mount = lifecycles.mount;
export const unmount = lifecycles.unmount;