"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const custom_webpack_builder_1 = require("./custom-webpack-builder");
exports.customWebpackConfigTransformFactory = (options, { workspaceRoot }) => browserWebpackConfig => {
    return custom_webpack_builder_1.CustomWebpackBuilder.buildWebpackConfig(core_1.normalize(workspaceRoot), options.customWebpackConfig, browserWebpackConfig, options //TODO: pass Target options as well (configuration option in particular)
    );
};
exports.indexHtmlTransformFactory = ({ indexTransform }, { workspaceRoot, target }) => {
    if (!indexTransform)
        return null;
    const transform = require(`${core_1.getSystemPath(core_1.normalize(workspaceRoot))}/${indexTransform}`);
    return (indexHtml) => __awaiter(this, void 0, void 0, function* () { return transform(target, indexHtml); });
};
exports.getTransforms = (options, context) => ({
    webpackConfiguration: exports.customWebpackConfigTransformFactory(options, context),
    indexHtml: exports.indexHtmlTransformFactory(options, context),
});
//# sourceMappingURL=common.js.map